expect_true(all(Deaths > LastAlive))
## No "NA" between the first and last "alive"
FirstAlive <- min(which(SeqCor %in% TRUE))
Unseen <- which(SeqCor %in% NA)
expect_true(all(Unseen < FirstAlive | Unseen > LastAlive))
## After the death always the death (no "NA")
if(length(Deaths) > 0){
FirstDead <- min(Deaths)
expect_true(all(Unseen < FirstDead))
}
## If no "dead" but "NA" nbr >= DeathConfirmation -> "dead" in "DBHCor"
# Alive NA NA DEAD NA
# Alive Alive NA NA
DeathConfirmation <- 2
Unseen_seq <- which(Seq %in% NA)
Deaths_seq <- which(Seq %in% FALSE)
if(length(Deaths_seq) == 0){ # if no death (Alive Alive NA NA)
if(length(Unseen_seq) >= DeathConfirmation)
expect_true(all(SeqCor[Unseen_seq] == FALSE))
}else{ # if death in the seq (Alive NA NA DEAD NA)
FirstDeath <- min(Deaths_seq)
UnseenBfDeath <- sum(Unseen_seq < FirstDeath) # nbr of NA before the death
if(UnseenBfDeath >= DeathConfirmation)
expect_true(all(SeqCor[Unseen_seq] == FALSE))
}
## If UseSize : if Diameter != NA -> Alive
expect_true(all(SeqCor[!is.na(Rslt[IdTree %in% i, Diameter])] == T))
## Add a "Comment" value when "LifeStatus" != "LifeStatus_TreeDataCor"
Comment <- Rslt[IdTree %in% i, StatusCorrectionMeth_TreeData ] != ""
compareNA <- function(v1,v2) {
same <- (v1 == v2) | (is.na(v1) & is.na(v2))
same[is.na(same)] <- FALSE
return(same)
}
expect_true(all(!compareNA(Seq, SeqCor) == Comment))
}
})
# No "dead" before "alive"
# No "NA" between the first and last "alive"
# after the death always the death (no "NA")
# if no "dead" but "NA" nbr >= DeathConfirmation -> "dead" in "DBHCor"
# if UseSize : if Diameter != NA -> Alive
# check SCBI subset -------------------------------------------------------
data(SCBISubsetFormated)
expect_warning(SCBICorrected <- StatusCorrection(SCBISubsetFormated, UseSize = T), "We added rows for missing trees and imputed average census Date")
expect_identical(unique(SCBICorrected$StatusCorrectionMeth_TreeData ), c("", "A measured tree is a living tree", "Between 2 alive occurrences, the tree was alive",
"Tree can't be dead before first being alive"))
expect_identical(SCBICorrected[IdStem %in% "10012",LifeStatus_TreeDataCor], SCBICorrected[IdStem %in% "10012",LifeStatus]) # this IdStem should not have any corrections
expect_true(all(SCBICorrected[IdStem %in% "11012", LifeStatus_TreeDataCor])) # first measurement had a DBH so should be alive, then second should be Alive because inbetwen two alive
expect_identical(SCBICorrected[IdStem %in% "11012", Comment_TreeData  ], c("Missed tree", "", ""))
SCBICorrected[IdStem %in% "11012",]
SCBICorrected[IdStem %in% "11012", StatusCorrectionMeth_TreeData
]
expect_identical(SCBICorrected[IdStem %in% "11012", StatusCorrectionMeth_TreeData  ], c("A measured tree is a living tree", "Between 2 alive occurrences, the tree was alive",
""))
SCBISubsetFormated[IdStem %in% "66114",]
expect_identical(SCBICorrected[IdStem %in% "66114", StatusCorrectionMeth_TreeData ], c("This tree was missed and this row was added", "", ""))
SCBICorrected[IdStem %in% "66114", Comment_TreeData ]
# Function to ensure that the first letter of any string is uppercase
toUpperFirst <- function(txt) {
short <- which(nchar(txt) < 2)
long <- which(nchar(txt) > 1)
txt[long] <- paste0(toupper(substring(txt[long], 1, 1)),
substring(txt[long], 2))
txt[short] <- toupper(txt[short])
txt
}
# Function to count the number of uppercases within character strings
countUpperCase <- function(txt) {
matches <- gregexpr("[A-Z]", txt)
count <- unlist(lapply(matches, function(match) {
if(is.na(match[1]))
{
return(0)
} else {
if (match[1] == -1) {
return(0)
} else {
return(length(match))
}
}))
return(count)
}
#' Botanical Correction
#'
#' @param Data Dataset (data.frame or data.table); it must contain Site and IdTree
#' Botanical Correction
#'
#' @param Data Dataset (data.frame or data.table); it must contain Site and IdTree
#'
#' @return A list with a complete log of the botanical corrections and Data with new columns:
#' Botanical Correction
#'
#' @param Data Dataset (data.frame or data.table); it must contain Site and IdTree
#'
#' @return A list with a complete log of the botanical corrections and Data with new columns:
#'   - `Accepted_family_returned_by_TNRS` (character): corrected family name
#'   - `Accepted_genus_returned_by_TNRS` (character): corrected genus name
#' Botanical Correction
#'
#' @param Data Dataset (data.frame or data.table); it must contain Site and IdTree
#'
#' @return A list with a complete log of the botanical corrections and Data with new columns:
#'   - `Accepted_family_returned_by_TNRS` (character): corrected family name
#'   - `Accepted_genus_returned_by_TNRS` (character): corrected genus name
#'   - `Accepted_species_returned_by_TNRS` (character): corrected species name
#'   - `Accepted_name_returned_by_TNRS` (character): corrected name (at any taxonomic level)
#' Botanical Correction
#'
#' @param Data Dataset (data.frame or data.table); it must contain Site and IdTree
#'
#' @return A list with a complete log of the botanical corrections and Data with new columns:
#'   - `Accepted_family_returned_by_TNRS` (character): corrected family name
#'   - `Accepted_genus_returned_by_TNRS` (character): corrected genus name
#'   - `Accepted_species_returned_by_TNRS` (character): corrected species name
#'   - `Accepted_name_returned_by_TNRS` (character): corrected name (at any taxonomic level)
#'   - `Annotations_returned_by_TNRS` (character): cf., aff., etc.
#'   - `Unmatched_terms_returned_by_TNRS` (character): unmatched terms, possibly needed to make morphospecies
#'
#'@details
#' - The function uses TNRS package provided by BIEN, https://bien.nceas.ucsb.edu/bien/tools/tnrs/
#'
#'@details
#' - The function uses TNRS package provided by BIEN, https://bien.nceas.ucsb.edu/bien/tools/tnrs/
#' - No special characters (typography)
#' - The suffix "aceae" is restricted to families, and words ending with "aceae" are deleted anywhere else
#'
#'@details
#' - The function uses TNRS package provided by BIEN, https://bien.nceas.ucsb.edu/bien/tools/tnrs/
#' - No special characters (typography)
#' - The suffix "aceae" is restricted to families, and words ending with "aceae" are deleted anywhere else
#' - Correct spelling of botanical names
#' - Update the families according to APG
#'
#'@details
#' - The function uses TNRS package provided by BIEN, https://bien.nceas.ucsb.edu/bien/tools/tnrs/
#' - No special characters (typography)
#' - The suffix "aceae" is restricted to families, and words ending with "aceae" are deleted anywhere else
#' - Correct spelling of botanical names
#' - Update the families according to APG
#' - The log contains a flag if there is more than one name for one Site x IdTree combination
#' - The log contains all details returned by TNRS (authors, etc.). Data just keeps the basic corrected names.
#'@importFrom stats na.omit
#'
#' @export
#' @examples
\dontrun{
library(data.table)
data(TestData)
...
#' @export
#'
#' @examples
#'\dontrun{
#' library(data.table)
#' data(TestData)
#' ...
#'
BotanicalCorrection <- function(Data) {
#### Arguments check ####
# Data
if (!inherits(Data, c("data.table", "data.frame")))
stop("Data must be a data.frame or data.table")
#### Function ####
setDT(Data) # data.frame to data.table
Data <- copy(Data)   # <~~~~~ KEY LINE so things don't happen on the global environment
Data[, IdTree := as.character(IdTree)]
# Make sure that we have the columns that we need  ---------------------------------------------------------------------
# (Mostly to avoid "if" statements and ramifications of the cases)
if(!"Comment_TreeData" %in% names(Data)) Data[, Comment_TreeData := ""]
if(!"Family" %in% names(Data)) Data[, Family := NA]
if(!"ScientificName" %in% names(Data)) Data[, ScientificName := NA]
if(!"Genus" %in% names(Data)) Data[, Genus := NA]
if(!"Species" %in% names(Data)) Data[, Species := NA]
if(!"Subspecies" %in% names(Data)) Data[, Subspecies := NA]
if(!"Variety" %in% names(Data)) Data[, Variety := NA]
# Not processed: "VernName", "Voucher", "IdLevel", "Authority"
# Exploration of data sources and reasoning (March 2023) ---------------------------------------------------------------------------------------------------------
if(FALSE) # *** I do not know where to keep this
{
# TPL is static since 2013, it has been substituted by WFO.
# Taxonstand package uses TPL and is not maintained. Do not use.
# Anything "SOAP" has been deprecated or is not functional anymore.
# Tropicos is the source of APG classification, APG4 as of today.
# taxize package looks into many sources to match the names, it takes 10x more time than alternatives.
# WFO package requires local installation of WFO -- it is an option but relatively slow. It requires handling authors etc. in separate steps.
# how to download:
# WFO.download(save.dir = path.wfo)
# unzip(paste0(path.wfo, "WFO_Backbone.zip"), exdir = path.wfo)
# WFO.remember(WFO.file = paste0(path.wfo, "classification.csv"))
# The taxize package has two solvers, but one of them is defunct:
# ?taxize::tnrs Phylotastic Taxonomic Name Resolution Service. Defunct - service was down far too much to be reliable
# The other is faster than TNRS package, but returns all matches from many sources,
# which is a mixture of latin binomials with and without authors, and does not
# give any idea of which one is a "good" name or not. TNRS is slower but returns
# what we need: Family, Genus, Species etc. separated, authors and annotations separated,
# and a explicit accepted name for the taxon.
system.time(t1 <- taxize::gnr_resolve(TestData$ScientificName[1:10]))
system.time(t2 <- TNRS::TNRS(TestData$ScientificName[1:10]))
# If seems easier to work with TNRS than with taxize, because it handles messy strings better:
taxize::gnr_resolve("cf. Inga edulis") # fails
TNRS::TNRS("cf. Inga edulis")$Accepted_name # works
# All decisions about string manipulation and flow are based on the behavior
# of the TNRS package. It is not trivial to switch to another name solver.
# Because of TNRS behavior, it seems feasible to concatenate things from different
# columns and then pass to TNRS main function. We do not have to go through the entire
# range of possibilities, in terms of string matches, finding annotations, etc.
# However, we cannot concatenate stuff blindly.
# Before concatenating, we need to solve redundancies in "Species" column.
TNRS::TNRS("Inga edulis edulis")$Name_matched # this returns "Inga edulis var. edulis"
TNRS::TNRS("Inga edulis Inga edulis")$Name_matched # this returns "Inga edulis var. edulis"
# Before concatenating, we also need to solve redundancies in "Genus" column.
# Redundancy in genus does not seem to be a problem in general...
TNRS::TNRS("Inga edulis Inga")$Name_matched # returns Inga edulis
TNRS::TNRS("Inga edulis var. edulis Inga")$Name_matched # returns Inga edulis var. edulis
TNRS::TNRS("Inga edulis subsp. edulis Inga")$Name_matched # returns Inga edulis var. edulis
TNRS::TNRS("Inga sp.1 Inga")$Name_matched # returns Inga
TNRS::TNRS("Inga Inga")$Name_matched # returns Inga
# ... but there are a few cases of invalid names.
# Plants should not have specific epithets mimicking the genus, but
# sometimes they have, and those names could appear in the databases.
# See 23.4 in https://www.bgbm.org/iapt/nomenclature/code/SaintLouis/0027Ch3Sec4a023.htm
TNRS::TNRS("Inga Inga")$Accepted_name # returns accepted name Inga
TNRS::TNRS("Linaria linaria")$Accepted_name # returns accepted name Linaria vulgaris
TNRS::TNRS("Linaria Linaria")$Accepted_name # upper case changes its behavior --> general advice
# If the content of "Family" column is not a "aceae" word,
# Is it safe to concatenate with the ScientificName column?
# NOT safe in general; do only if the word is absent.
TNRS::TNRS("Linaria Linaria linaria")$Name_matched # not safe
TNRS::TNRS("Inga Inga edulis")$Name_matched # not safe
# *** Possible bug: short codes for families, that are NOT aceae words.
# We need to identify them and get rid of them entirely.
# This might be possible with the Family column, but not
# so easy if the short codes are integrated into ScientificName.
TNRS::TNRS("FAB Inga edulis")$Name_matched # returns "Faba", a different genus
TNRS::TNRS("FABAC. Inga edulis")$Name_matched # returns "Faba", a different genus
TNRS::TNRS("AREC. Euterpe precatoria")$Name_matched # returns "Areca", a different genus
# What if ScientificName contains just the specific epithet?
# The order of concatenation matters!
# It is KEY that the user provides the specific epithet only in the "Species" column
TNRS::TNRS("edulis Inga")$Name_matched # returns "Elelis"
# Genus initials: this is an issue that could take us to
# the reverse "species-genus" problem and/or other problems:
TNRS::TNRS("Inga I. edulis")$Accepted_name # losing the species is better than
TNRS::TNRS("I. edulis")$Accepted_name # losing everything
TNRS::TNRS("Inga I. edulis")$Accepted_name # concatenating Genus first won't solve the problem
# It seems necessary to anticipate these cases and complete ScientificName from Genus
# We do not need to solve redundancies in subspecies or variety, because concatenation
# of "ScientificName" with "Subspecies" and "Variety" columns seems safe.
# Furthermore, many subspecies and varieties are the same words as the specific epithet,
# so if we remove redundancias we will lose part of the information.
TNRS::TNRS("Inga edulis var. edulis var. edulis")$Name_matched # returns Inga edulis var. edulis
TNRS::TNRS("Inga edulis var. edulis subsp. edulis")$Name_matched # returns Inga edulis var. edulis
# Subspecies and Variety need to have just the name of the subspecies or variety,
# without the latin binomial for the species. Otherwise it will fail.
TNRS::TNRS("Inga edulis var. Inga edulis var. edulis")$Name_matched # this will not return the variety
# It is safe to concatenate free text that characterizes the morfospecies,
# it will just return the accepted name.
TNRS::TNRS("Inga edulis var. extremely hairy ecotype")$Name_matched # returns "Inga edulis"
TNRS::TNRS("Inga edulis subsp. extremely hairy ecotype")$Name_matched # returns "Inga edulis"
TNRS::TNRS("Inga edulis var. Inga edulis extremely hairy ecotype")$Name_matched # returns "Inga edulis"
TNRS::TNRS("Inga edulis subsp. Inga edulis extremely hairy ecotype")$Name_matched # returns "Inga edulis"
TNRS::TNRS("Inga var. extremely hairy ecotype")$Name_matched # returns "Inga"
TNRS::TNRS("Inga subsp. extremely hairy ecotype")$Name_matched # returns "Inga"
TNRS::TNRS("Inga indet var. extremely hairy ecotype")$Name_matched # returns "Inga"
TNRS::TNRS("Inga indet subsp. extremely hairy ecotype")$Name_matched # returns "Inga"
TNRS::TNRS("cf. Inga var. extremely hairy ecotype")$Name_matched # returns "Inga"
TNRS::TNRS("cf. Inga subsp. extremely hairy ecotype")$Name_matched # returns "Inga"
# Messy "indet."s: a reason why we need to add spaces after points to avoid problems.
TNRS::TNRS("Indet.Sapindaceae Indet.")$Accepted_name  # no spaces in the original TestData: fails
TNRS::TNRS("Indet. Sapindaceae Indet.")$Accepted_name # with space: works
TNRS::TNRS("Poaceae Indet. Indet.")$Accepted_name # this will work just fine
TNRS::TNRS("Poaceae Indet. Indet. Indet. Indet.")$Accepted_name # this works
TNRS::TNRS("cf. Poaceae Indet. sp. = GAT1234")$Accepted_name # this works
# Passing vernacular names to TNRS will not work. This is not considered in the code.
TNRS::TNRS("santi koko")$Accepted_name
TNRS::TNRS("wata tiki")$Accepted_name
TNRS::TNRS("tossopassa montagne")$Accepted_name
TNRS::TNRS("wapa")$Accepted_name
# Some cases identifies by Vincyane as problematic with WFO are not problems with TNRS:
# For the moment, there is no need of a "special taxa" internal library.
TNRS::TNRS(c("Tetragastris panamensis",
"Protium picramnioides",
"Tetragastris stevensonii"))$Accepted_name # works fine, returns "Protium stevensonii"
TNRS::TNRS("Tovomita")$Accepted_family # correctly placed in Clusiaceae
TNRS::TNRS("Votomita")$Accepted_family # correctly placed in Melastomataceae. Memecylaceae was a split for Mouriri-like Melastomataceae
# Other things to have in mind:
TNRS::TNRS(NULL) # gives error
TNRS::TNRS(NA) # gives error
TNRS::TNRS("")$Accepted_name # will work
}
# General string manipulations (order matters)  ---------------------------------------------------------------------------------------------------------
# space after point
# _ to space
# remove double spaces
# strings to NA: "NA", " ", "", "NULL", "unknown", "none", "?"
# make sure first letter is uppercase in: Family, ScientificName, Genus
# remove special characters for Genus and Family (in Species we want to keep them)
Vars <- c("Family", "ScientificName", "Genus", "Species", "Subspecies", "Variety")
M <- as.matrix(Data[, ..Vars]) # we can use vectorized code on several columns
original.name.ids <- paste(M[,"Family"],
M[,"ScientificName"],
M[,"Genus"],
M[,"Species"],
M[,"Subspecies"],
M[,"Variety"])
rownames(M) <- original.name.ids
M <- unique(M) # smaller object
# for development ***
if(FALSE)
{
M <- head(M, 5)
M[2, 1] <- "a"
M <- tolower(M)
M[1, 1] <- "NA"
}
M <- gsub(".", ". ", M, fixed = TRUE)
M <- gsub("_", " ", M, fixed = TRUE)
M <- matrix(stringr::str_squish(M), nrow = nrow(M), dimnames = dimnames(M))
M[M %in% c("NA", "N/A", "na", " ", "", "NULL", "unknown", "none", "?", "??", "???", "...")] <- NA
M[,c("Family", "ScientificName", "Genus")] <- toUpperFirst(M[,c("Family", "ScientificName", "Genus")])
M[,"Family"] <- gsub("[[:punct:]]", "", M[,"Family"]) # !"#$%&’()*+,-./:;<=>?@[]^_`{|}~
M[,"Genus"] <- gsub("[[:punct:]]", "", M[,"Genus"]) # !"#$%&’()*+,-./:;<=>?@[]^_`{|}~
# Handle "Family" column and get the best guess of the family ----
# One thing that could generate many problems is using short codes instead
# of full family names, e.g. FAB or FABAC. instead of Fabaceae, etc.
# This is relatively common practice and needs to be checked before moving forward.
# TNRS is robust to the lack of families, but we do not want to remove content
# from Family column entirely because it might be the only taxonomic information.
# (Presence of text inside ScientificName is not enough proof that we know more than family,
# as we could have things like Family = "Fabaceae" + ScientificName = "Indet. sp. 1";
# we cannot expect in general that IdLevel column will be populated either).
# Procedure:
# first, try to match with the complete names
# second, look for "aceae" words everywhere: keep elsewhere and remove from columns
# lastly, remove anything remaining in Family, and use the space to store "aceae" words
# Note that the behavior before (Vincyane's code) was to swap
# and include into the Genus column any word without "aceae" in
# the Family column. In the current version, it is KEY that the
# user includes the genus into the ScientificName or Genus columns.
# Redundancy by including genus into Family column won't affect.
# (1) try to guess the family based on short codes
txt <- M[,"Family"]
#txt <- c("FAB.", "MELAS", "AST", "CLU", "PIP.") # for development ***
cleantxt <- gsub(".", "", txt, fixed = TRUE)
cleantxt <- gsub(" ", "", cleantxt, fixed = TRUE)
fams <- taxize::apg_families
fams <- unique(c(fams$family, fams$synonym, fams$original, fams$accepted_name))
fams <- unique(unlist(strsplit(fams, "=", fixed = TRUE)))
fams <- gsub(" ", "", fams, fixed = TRUE)
fams <- gsub("?", "", fams, fixed = TRUE)
fams <- unique(fams[grep("aceae", fams)])
try.to.complete <- which(!grepl("aceae", cleantxt))
versions <- na.omit(unique(nchar(cleantxt[try.to.complete])))
guessed.family <- cleantxt
for(NC in versions)
{
w <- try.to.complete[which(nchar(cleantxt[try.to.complete]) == NC)]
short <- substr(fams, 1, NC)
names(short) <- fams
unequivocal <- names(which(table(short) == 1))
names(unequivocal) <- names(short)[match(unequivocal, short)]
guessed.family[w] <- names(unequivocal)[match(tolower(cleantxt[w]), tolower(unequivocal))]
}
M[try.to.complete, "Family"] <- guessed.family[try.to.complete]
# (2) find "aceae" words anywhere and keep them as the
# most reliable source of information regarding family.
# Remove all "aceae" words from their original locations.
# (If multiple matches, this code does not cross-check; it just picks one)
ends_in <- function(x, pattern = "aceae") substr(x, nchar(x) - nchar(pattern) + 1, nchar(x)) == pattern
best.guess.family <- rep(NA, nrow(M))
words <- strsplit(M, split = " ")
aceae <- matrix(sapply(words, function(x) x[ends_in(x, "aceae")][1]), nrow = nrow(M)) # [1] picks one
W <- which(!is.na(aceae), arr.ind = TRUE)
W <- W[!duplicated(W[,"row"]),] # this also picks one
best.guess.family[W[,"row"]] <- aceae[W]
delete_aceae <- function(txt) {
words <- strsplit(txt, split = " ")
sapply(words, function(x) {
x <- x[!is.na(x)]
paste(x[!ends_in(x, "aceae")], collapse = " ")
})
}
M[,"Family"] <- delete_aceae(M[,"Family"]) # will be deleted later anyway
M[,"ScientificName"] <- delete_aceae(M[,"ScientificName"])
M[,"Genus"] <- delete_aceae(M[,"Genus"])
M[,"Species"] <- delete_aceae(M[,"Species"])
M[,"Subspecies"] <- delete_aceae(M[,"Subspecies"])
M[,"Variety"] <- delete_aceae(M[,"Variety"])
# (3) use the "aceae" words found in previous step to
# populate the Family column, and remove anything else
# that remains in there.
M[,"Family"] <- ""
M[,"Family"] <- best.guess.family
M[is.na(M[,"Family"]),"Family"] <- ""
M[,c("Family", "ScientificName", "Genus")] <- toUpperFirst(M[,c("Family", "ScientificName", "Genus")])
# Solve initials ----
# E.g. {Family = "Fabaceae", ScientificName = "I. edulis", Genus = "Inga", ...}
# This problem is a problem because of the order of concatenation.
# Two possible forms: "A. " or "A " at the first letter. No genus has just 1 letter.
# Single letters might have some meaning, like morfospecies:
# {ScientificName = "A Inga", Genus = "Inga} and {ScientificName = "B Inga", Genus = "Inga}
# but appending them to the end of ScientificName will mess with the subspecies and varieties:
#TNRS::TNRS("Inga edulis X.")$Accepted_name # this will work
#TNRS::TNRS("Inga edulis X. var. edulis")$Accepted_name # but this will fail
# I get rid of initials entirely -- this might be source of some issues later.
problems2 <- which(substr(M[,"ScientificName"], 1, 2) %in% paste0(LETTERS, " "))
problems3 <- which(substr(M[,"ScientificName"], 1, 3) %in% paste0(LETTERS, ". "))
M[problems2,"ScientificName"] <- paste(M[problems2,"Genus"], substr(M[problems2,"ScientificName"], 3, nchar(M[problems2,"ScientificName"])))
M[problems3,"ScientificName"] <- paste(M[problems3,"Genus"], substr(M[problems3,"ScientificName"], 4, nchar(M[problems3,"ScientificName"])))
# Besides, remove initials if they are present in the "Species" column:
problems2 <- which(substr(M[,"Species"], 1, 2) %in% paste0(LETTERS, " "))
problems3 <- which(substr(M[,"Species"], 1, 3) %in% paste0(LETTERS, ". "))
M[problems2,"Species"] <- substr(M[problems2,"Species"], 3, nchar(M[problems2,"Species"]))
M[problems3,"Species"] <- substr(M[problems3,"Species"], 4, nchar(M[problems3,"Species"]))
# Solve redundancies between ScientificName and Species/Genus columns ----
# A concatenation can fail if we incorporate the specific epithet twice,
# as TNRS will try to find subspecies and varieties. It can also fail in
# rare instances of invalid names where the specific epithet is the same
# word as in the genus. Solve redundancies in both cases is safer.
# https://stackoverflow.com/questions/19424709/r-gsub-pattern-vector-and-replacement-vector
M <- matrix(stringr::str_squish(M), nrow = nrow(M), dimnames = dimnames(M))
to.remove <- gsub(" ", "|", M[,"ScientificName"]) # any individual word
replacements <- rep("", length(to.remove))
names(replacements) <- to.remove # this is needed for the code to run in a vectorized way
M[,"Species"] <- stringr::str_replace_all(M[,"Species"], replacements)
M[,"Genus"] <- stringr::str_replace_all(M[,"Genus"], replacements)
# Concatenate a single string to pass to TNRS ----
M <- matrix(stringr::str_squish(M), nrow = nrow(M), dimnames = dimnames(M))
M[is.na(M)] <- ""
s <- ifelse(M[,"Subspecies"] == "", "", paste("subsp.", M[,"Subspecies"]))
v <- ifelse(M[,"Variety"] == "", "", paste("var.", M[,"Variety"]))
pass.this <- paste(M[,"Family"], M[,"ScientificName"], M[,"Genus"], M[,"Species"], s, v)
pass.this <- stringr::str_squish(pass.this)
# Call TNRS ---
# Use multiple sources for names, but the classification of Tropicos = APG.
pass.this.unique <- unique(pass.this)
tnrs <- TNRS::TNRS(pass.this.unique,
sources = c("tropicos", "usda", "wfo", "wcvp"),
classification = "tropicos")
leftovers <- pass.this.unique[!pass.this.unique %in% tnrs$Name_submitted] # I do not know why, but sometimes we have this!
if(length(leftovers) > 0)
{
tnrs2 <- TNRS::TNRS(leftovers,
sources = c("tropicos", "usda", "wfo", "wcvp"),
classification = "tropicos")
tnrs <- rbind(tnrs, tnrs2)
}
# Add Accepted_genus to the TNRS output, for easier management later
g <- sapply(strsplit(tnrs$Accepted_species, split = " "), function(x) x[1])
g[is.na(g)] <- "" # consistency with TNRS
tnrs$Accepted_genus <- g
# Log of botanical corrections + merge back into main dataset ----
# Put together M + authority, ... + output of TNRS
# Outside the function we may need to substitute with the user's column names
where.in.tnrs <- match(pass.this, tnrs$Name_submitted)
expanded.tnrs <- tnrs[where.in.tnrs,]
colnames(expanded.tnrs) <- paste0(colnames(expanded.tnrs), "_returned_by_TNRS")
colnames(M) <- paste0(colnames(M), "_processed_by_app")
M <- data.frame(M, expanded.tnrs)
where.in.M <- match(original.name.ids, rownames(M))
M <- M[where.in.M,] # same number of rows as Data
extra.vars1 <- c("IdStem", "IdTree", "Site", "Voucher", "IdLevel", "Authority", "VernName")
extra.vars2 <- c("IdLevel", "Authority", "VernName")
V <- c(extra.vars1, Vars, extra.vars2)
M0 <- as.matrix(Data[, ..V]) # original
LOG <- data.frame(M0, M) # a complete record of the original names, what we did to them, and what TNRS thinks
#LOG[which(LOG$Accepted_name_returned_by_TNRS == ""), ] # one of the things the user will have to look at
# We do not need to keep everything, just the stuff required for taxonomic homogeneization
# Note: Unmatched_terms are needed to differentiate morphospecies.
keep <- c("Accepted_family", "Accepted_genus", "Accepted_species", "Accepted_name",  "Annotations", "Unmatched_terms")
keep <- paste0(keep, "_returned_by_TNRS")
Data <- c(Data, LOG[,keep]) # Merge back into the dataset
setDT(Data)
# Fill information at the stem level if missing ----
# The individual-level info is at IdTree within Site
# The code below does this just for the corrected variables,
# those that we keep from TNRS output. But we could do it
# for the original columns as well. The things with that is
# that incongruences may or may not mean anything.
for(k in keep)
{
# Go from "" to NA to be able to use the gap-filling function of zoo
Data[, (k) := replace(get(k), get(k) == "", NA)]
# Fill the gaps in the target column by group (Site and IdTree)
Data[, (k) := zoo::na.locf(get(k), na.rm = FALSE, fromLast = FALSE), by = .(Site, IdTree)]
Data[, (k) := zoo::na.locf(get(k), na.rm = FALSE, fromLast = TRUE), by = .(Site, IdTree)]
}
# Incongruences in the determination of different stems within the same tree
problems <- list()
for(k in keep)
{
freqs <- Data[, list(Freq =.N), by=list(get(k), Site, IdTree)]
freqs$problem_with <- k
problems <- rbind(problems, freqs[which(duplicated(freqs[,c("Site", "IdTree")])), ])
}
problems <- problems[,c("Site", "IdTree", "problem_with")]
problems <- problems[, .(problems_with = paste(problem_with, collapse = ", ")), by = .(Site, IdTree)]
comment.to.add <- problems$problems_with[match(paste0(LOG$Site, "-", LOG$IdTree),
paste0(problems$Site, "-", problems$IdTree))]
comment.to.add[!is.na()] <- paste0("Incongruent taxonomic information within Site x IdTree combinations. Check: ", comment.to.add[!is.na()])
comment.to.add[is.na(comment.to.add)] <- ""
LOG$incongruent_taxonomic_information_within_the_same_tree <- comment.to.add
# Return ----
return(list(Data = Data, log = LOG))
}
data(TestData)
BotanicalCorrection(TestData)
install.packages("taxize")
install.packages("v")
install.packages("phangorn")
version
